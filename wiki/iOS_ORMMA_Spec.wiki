#summary iOS Implementation Spec (Draft Aug. 25, 2010)
#labels Phase-Implementation
#sidebar SideBar

=Specifications for iOS Reference Implementation =

<wiki:toc max_depth="3" />

==Audience==
This section is intended for SDK developers responsible for implementing these guidelines for rich media interoperability on Apple’s iOS platform.

==Implementation Notes for iOS Developers== 
The primary method for providing native access to the web view is to use the "stringByEvaluatingJavaScriptFromString" method. This allows the SDK developer to inject code into the web view for the !JavaScript developer to access, as well as provide listeners on the native side for web view triggers.

As an example, to implement an outbound endpoint, or event trigger for shaking, the SDK developer would listen for UIEventSubtypeMotionShake, then throw the !JavaScript event “shakeChange” with the method stringByEvaluatingJavaScriptFromString.

==Overview==
This standard defines a native AdView container for Rich Media Ads to display in Apps and a !JavaScript AdController for Ad Creatives to interact with the AdView and the device. The AdView encapsulates an XHTML and !JavaScript enabled Web browser view, such as iOS’s UIWebView, and a bridge that can integrate Ads with the OS’s capabilities.
 
Example: iOS Components

[http://media.cw.s3.amazonaws.com/ormma/iOSComponents.png]

The reference SDK implements the Container on iOS 3+ devices using an Objective-C subclass of UIView called AdView. AdView instantiates a child UIWebView, sets itself as the Web view’s delegate, and implements the UIWebViewDelegate methods. 

The !JavaScript AdController class communicates with the Objective-C AdView using a custom URI scheme that is inspected and dispatched in the UIWebViewDelegate [shouldStartLoadWithRequest…] method. The URI scheme is:

*oaa:command:parameter1:parameter2:…:parameterN*

The first element is always the static string “oaa”. The second parameter is a sting representing a command name. Additional parameters, if present, are an ordered list of parameters specific to the command and defined by convention.

The Objective-C AdView class communicates with the !JavaScript AdController class by calling the UIWebView’s [stringByEvaluatingJavaScriptFromString…] method with a !JavaScript function call that modifies the state of the static AdController !JavaScript class. This interface is private and defined by convention.

==Flow Diagrams==
===iOS Simple Ad Initialization Flow===
[http://media.cw.s3.amazonaws.com/ormma/iOSFlow.png]
 
===iOS Rich Media Initialization Flow===
[http://media.cw.s3.amazonaws.com/ormma/iOSInit.png]

===iOS Rich Media Resize Flow===
[http://media.cw.s3.amazonaws.com/ormma/iOSMediaResize.png]

==AdView Container==
The AdView object is a native class of the device OS. A given App view can have one or more Ad Containers that will all act independently of one another. The primary method call of the Container is loadRequest(URL), which causes the embedded Web view to retrieve HTML from the Ad Server.

It is necessary that the Container be at the highest Z-order of any part of the UI that the Ad might cover and it is recommended that it be at the highest Z-order of all UI elements in the View.

When the developer wants the App to display an Ad, they generate a URL containing whatever targeting parameters are appropriate and pass it to the Container’s loadRequest (URL) method. The AdView then triggers the Web view to request the URL from the Ad Server and display the resulting HTML. If the Ad does not make use of the AdController object, it will behave as a normal, isolated HTML Ad and any links will open the OS’s default web browser. This fallback functionality allows fixed sized, non-interactive Web Creatives to be used without modification.

==AdController==
The AdController !JavaScript object is a singleton and self-initializes when the Ad HTML loads the !JavaScript include containing that SDK’s AdController implementation.

===Registration Object for Synchronous Methods===
Nearly all interactions are asynchronous because of the requirements to communicate with the native layer with location.href commands. However, the AdController may use a registration object to retrieve initial/static values from the native layer. It is then the responsibility of the AdController to maintain this model for methods that have return values.

Example properties to request during an initial registration include
  # Methods with return values
    # Size of local cache for cacheRemaining()
    # Ad Viewer dimensions for dimensions()
    # Ad Viewer properties for properties()
    # Ad Viewer visibility for isVisible()
    # Network status for getNetwork()
    # Initial device orientation for getOrientation()
    # Device screen size for getScreenSize()
    # Supported device features for supports()
  # SDK function names, so AdController provides a façade layer to existing code
  # Commonly requested data, so AdController can optimize/minimize communications between layers
    # Device location
    # ~~Device ID~~ (this is no longer allowed per Apple privacy policies)
    # Available transitions
    # SDK version


==Sample Code for Ad Developers==
__This section still needs proof reading once the above specifications are finalized.__

===Level 1===
====Event handling===
The following example code illustrates adding a listener:

{{{
var locateHandler = function(lat, lng) {
	alert('got ' + lat + ',' + lng);
};
AdFrame.addEventListener('locate', locateHandler);
}}}

The following example code illustrates removing the listener that was added in the previous example:

{{{
AdFrame.removeEventListener('locate', locateHandler);
 }}}

====Error handling====
The following code expands upon the "locate" example to illustrate listening for an error event:

{{{
if (AdFrame.supports('location')) {
	var onLocate = function(lat, lng) {
		alert('I\'m at ' + lat + ',' + lng);
		AdFrame.removeEventListener('locate', this);
		AdFrame.removeEventListener('error', onLocateError);
	};
	var onLocateError = function(message, action) {
		if (action == 'locate') {
			alert('Geolocation is not available: ' + message);
			AdFrame.removeEventListener('error', this);
			AdFrame.removeEventListener('locate', onLocate);
		}
	};
	AdFrame.addEventListener('locate', onLocate);
	AdFrame.addEventListener('error', onLocateError);
	AdFrame.locate();
}
}}}

====Controlling display====
The following example illustrates setting, getting, and listening for changes to the display state:

{{{
if (!AdFrame.isVisible()) {
	AdFrame.show( function() {
		alert('Now you see me...');
		AdFrame.hide( function() {
			alert('Now you don\'t!');
		});
	});
}
}}}

The following example illustrates setting, getting, and listening for changes to the display state:

{{{
if (!AdFrame.isVisible()) {
	AdFrame.addEventListener('show', function() {
		alert('Now you see me...');
		AdFrame.hide();
		AdFrame.removeEventListener('show', this);
		AdFrame.addEventListener('hide', function() {
			alert('Now you don\'t!');
			AdFrame.removeEventListener('hide', this);
		});
	});
	AdFrame.show();
}
}}}

====Resizing display====
The following example illustrates resizing, evaluating dimensions and properties, and listening for resize events:

{{{
var resizeListener = function(d, p) {
	alert('resized view to ' + (d.right-d.left) + 'x' + (d.bottom-d.top));
	AdFrame.removeEventListener('resize', this);
};

var d = AdFrame.dimensions();
var p = AdFrame.properties();
d.bottom = d.bottom + 100;
p.transition = 'slide';

AdFrame.resize(d, p, resizeListener);
}}}

Sample calling code would then look like

{{{
function bannerOnclick() {
 AdFrame.resize(
 { 0, 0, MAX_HEIGHT, MAX_WIDTH },
 {"transition":"roll","navigation":"close","use-background":"false","is-modal":"true"},
 function() {
 document.getElementById('interstitialad').style.display = 'block';
 document.getElementById('bannerad').style.display = 'none';
 }
 );
 return (false); //do not allow click event to bubble up
}
function panelCloseOnclick() {
 AdFrame.resize (
 {0, 0, INITIAL_HEIGHT, INITAL_WIDTH},
 {"transition":"roll","navigation":"none","use-background":"false","is-modal":"false"},
 function() {
 document.getElementById('bannerad').style.display = 'block';
 document.getElementById('interstitialad').style.display = 'none';
 }
 );
 return (false); //do not allow click event to bubble up
}
}}} 

...
 
{{{
<div id="interstialad" style="display:none">
 <a href="#" onclick="return(panelCloseOnclick())"><img src="http://advertiser.url/close_button.gif"/></a>
 <a href="http://m.advertiser.url"><img src="http://advertiser.url/fullpage.gif"/></a>
</div>
<div id="bannerad">
 <a href="#" onclick="return(bannerOnclick())"><img src="http://advertiser.url/banner.gif"/></a>
</div>
}}}

===Level 2===
====native features====
=====supports=====
The following example demonstrates feature inspection:

{{{
if (AdFrame.supports('location')) {
	AdFrame.addEventListener('locate', function(lat, lng) {
		alert('I\'m at ' + lat + ',' + lng);
		AdFrame.removeEventListener('locate', this);
	});
	AdFrame.locate();
}
}}}

=====alignment=====
The following example demonstrates polling for a "alignmentChange" event:

{{{
AdFrame.addEventListener('alignmentChange', function(direction) {
	alert('I\'m pointed ' + direction + ' degrees from North.');
});
AdFrame.getAlignment();
}}}

=====location=====
The following example demonstrates polling for a "locationChange" event:

{{{
AdFrame.addEventListener('locationChange', function(lat, lng) {
	alert('I\'m at ' + lat + ',' + lng);
});
AdFrame.addEventListener('error', function(action, error) {
	if (action=="location") {
		alert("I don't know where I am");
	}
});
AdFrame.getLocation();
}}}

=====orientation=====
The following example demonstrates receiving an "orientationChange" event:

{{{
AdFrame.addEventListener('orientationChange', function(orientation) {
	if (orientation == 180) {
		alert('Oh no - I flipped over!');
	}
	AdFrame.removeEventListener('orientationChange', this);
});
}}}

=====network=====
The following example demonstrates receiving a "networkChange" event:

{{{
AdFrame.addEventListener('networkChange', function(isOnline, connectionType) {
	if (isOnline) {
		alert('Watch streaming movies now');
	} else {
		alert('Streaming movies are not available');
	}
});
}}}

=====screenSize=====
The following example demonstrates receiving a "screenSizeChange" event:

{{{
AdFrame.addEventListener('screenSizeChange', function(width, height) {
	alert('Wow - the screen is ' + width + 'x' + height);
	AdFrame.removeEventListener('screenSizeChange', this);
});
}}}

=====shake=====
The following example demonstrates receiving a "shakeChange" event:

{{{
AdFrame.addEventListener('shakeChange', function(threshold, time) {
	if (threshold >= 10 && time >= 30) {
		alert('Kaboooom!');
		AdFrame.removeEventListener('shakeChange', this);
	}
});
}}}

=====tilt=====
The following example demonstrates polling for a "tiltChange" event:

{{{
AdFrame.addEventListener('tiltChange', function(x, y, z) {
	alert('I\'m pitching ' + y + ' degrees from straight up and down.');
});
setTimeout(AdFrame.getTilt(), 100);	
}}}

====call-to-action====
=====request=====
The following example demonstrates usage of the request action and response event:

{{{
<script type="text/javascript">
AdFrame.addEventListener('response', function(uri, response) {
	if (uri == 'http://a.com/some/uri.xml') {
		alert(response);
		AdFrame.removeEventListener('response', this);
	}
});
AdFrame.request('http://a.com/some/uri.xml', 'proxy');
</script>
<a href="http://a.com/b.html" 
 onclick="AdFrame.request(this.href, 'external')">Open a web browser</a>
}}}

===Level 3===
====Asset management====

{{{
AdFrame.addAssets({
	'/tmp/one.png':'http://my.domain.com/image1.png',
	'/tmp/two.mp4':'http://a.domain.org/someMovie.mp4',
	'/tmp/three.js':'http://an.adserver.com/some/ad/request?to=execute'
});
}}}

This code sample illustrates usage of the local asset cache:

{{{
<script type="text/javascript">
AdFrame.addAlias('/logo.png', 'http://a.com/my/logo.png');
AdFrame.addEventListener('assetReady', function(alias) {
	if (alias == '/newmap.png') {
		var img = document.createElement('img');
		img.src = '/newmap.png';
		document.body.appendElement(img);
		AdFrame.removeEventListener('assetReady', this);
	}
});
if (AdFrame.cacheRemaining() >= 50000) {
	AdFrame.addAlias('/newmap.png', 'http://a.com/big/img.png');
} else {
	AdFrame.addEventListener('assetRemoved', function(alias) {
		if (alias == '/oldmap.png') {
			AdFrame.addAlias('/newmap.png', 'http://a.com/big/img.png');
			AdFrame.removeEventListener('assetRemoved', this);
		}
	});
	AdFrame.removeAsset('/oldmap.png');
}
</script>
<img src="/logo.png">
}}}

===Complete code sample===
In a complex example, the Ad Creative uses the !JavaScript AdController object to take control of the AdView and interact with features of the device and OS. The initial Ad is a small shim with a static background or a “Loading…” message, a !JavaScript include that loads the SDK’s AdController implementation, and !JavaScript that uses the AdController object.

The first thing the Ad does is check to see if the local assets it needs are already downloaded. If they are not, it downloads a new base HTML page to the local file system as well as all of the !JavaScript, CSS, image, and other files it needs to execute locally. It also registers an Event Listener function for downloads and keeps track of the files that successfully download. Once all of the necessary files are present locally, the Ad instructs the AdController to tell the AdView to load the local HTML file, which then takes over as the body of and business logic of the Ad. 
Once the local version of the Ad is loaded and in charge, it can reference the local assets and notify the AdController object that it can operate in off-line mode. The specifics of how an SDK handles off-line Ads are up to the SDK developer, but Ads that indicate that they can run off-line should have everything they need stored locally or modify their behavior if the AdController object indicates that the device is off-line.

When the Ad is ready to display, it fills the Web view with a banner or other in-view Ad unit. The only user interaction for this Ad’s banner state is to expand when touched, so the Ad waits to be touched. When the user touches the Ad, the Ad’s !JavaScript uses the AdController object to notify the App that the Ad is expanding so that it can stop anything that the user will not be able to interact with. The Ad then resizes the Container and Web view to take up the entire screen of the device using a transition of its choice.

When the Ad reaches full screen, its !JavaScript registers Event Listeners for the accelerometer and shake gestures. The body of the expanded ad is a game where the user controls something by manipulating the device’s orientation. The Event Listeners for the accelerometer data get called with the devices 3D orientation vectors at the desired interval and the Ad’s !JavaScript controls the game rendering.
When the user is done with the expanded Ad, they click a close button that causes the Ad to unregister the Event Listeners, resize the Ad to its original size, display the Ad’s banner state, and notify the App that it can resume. If the device was off-line when the user interaction took place, any metrics called made by the Ad to the AdController object are cached by the SDK until the device is on-line again, and then the calls are made.

__Code TBD__