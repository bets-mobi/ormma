#summary Level 1 Requirements
#sidebar SideBar

=Ad Controller Requirements: Level 1=

===Initialization===
Simply by including the SDK’s !JavaScript library, the Controller is available to the ad designer. The Controller encapsulates and abstracts all interactions between the web layer and the native layer and identifies this SDK as compatible with these specifications.
Need identification methods? Vendor names, SDK versions, compliance levels?

===Preloading and Initial Display===
It is up to the ad developer to provide a simple HTML, such as an <img> tag, for the initial display of their ad while other assets are loaded in the background. This HTML will be displayed in the Container while !JavaScript uses the Controller to request and invoke additional capabilities. Ultimately, the initial HTML display may be completely replaced by a rich media ad once all assets are ready, depending on the creative requirements.

===Event Handling===
Event handling is a key concept of this recommendation. Communicating between the web layer and native layer is asynchronous by nature. Through event handling, the ad designer is able to listen for particular actions and respond to those actions on an as-needed basis. These specifications advocate broadcast-style events to support the broadest range of features/flexibility with the greatest consistency.

The controller exposes these methods.

*addEventListener* method

Use this method to subscribe a specific handler method to a specific event. In this way, multiple listeners can subscribe to a specific event, and a single listener can handle multiple events.

*removeEventListener* method

Use this method to unsubscribe a specific handler method from a specific event.

===Error Handling===
Error handling is very straightforward in this specification. When an error occurs, the "error" event is thrown with diagnostic information about the event. Any number of listeners can monitor for errors of different types and respond as needed.

*error* event

This event is thrown whenever an error occurs. The event contains a description of the error that occurred and, if appropriate, the name of the action that resulted in the error.

===Controlling Display===
Besides the initial display, the ad developer may have a number of reasons to control the display. 
  * An application may load views in the background to help with latency issues so that an ad is requested, but not visible to the user.
  * The ad may expand beyond the initial size, but only if native features are available such as a compass or http live streaming video.
  * Additional online libraries must be loaded for user interactions to work.

*show method, “visibleChange” event*

Request to show the Ad Container. A “visibleChange” event is broadcasted when completed.

*hide method, “specification” event*

Request to hide the Ad Container. A “visibleChange” event is broadcasted when completed.

*isVisible getter*

Get the current state of the Ad Container. isVisible is true when the container is actually visible to the end-user, not when it is loaded in the background.

===Resizing Display===
The ability to resize and/or reposition the web viewer is the most desired feature for any in-app rich media library and is the most important function to implement for interoperability among rich media ads. This document outlines an approach with very granular control of these actions to the ad designer.

Although the application developer devotes some space to an ad banner, the rich media ad often needs to expand into more space as the result of user interaction. A standard method for resizing the ad area greatly simplifies cross-device support.

While it is possible for an SDK vendor to implement this feature by simply displaying another full-size viewing window for expanded ads, this strategy creates a jarring experience. The rich media ad developer typically requires more nuanced sizing and control. And the experience for users should be that the original creative seamlessly evolves towards an expanded view. Regardless of implementation by the SDK vendor, the intended effect should always be that the initial display is resized, (not replaced or overlaid).

*resize method, “resizeChange” event*

Use this method to resize the web viewer. In addition, the ad designer can define the transition effect, style of view window, and what style of navigation bar to display, if any. 

The SDK should provide protection from creatives that do not provide an exit for the user by always displaying a navigation bar with an "close" when the user double-clicks on the ad.

*reset method*

Use this method to return an ad to its initial state, usually a banner. This may be called pro grammatically, but is also available to the application/sdk developer when exiting ads that have timed out.

*getResizeDimensions method, dimensions object*

Use this method to get the current dimensions of the web viewer. This is expressed as an object with the dimensions for top, left, bottom and right.

Use this illustration to better define the dimensions.

 [http://media.cw.s3.amazonaws.com/ormma/resizing1.png]

*getResizeProperties method, properties object*

Use this method to get the current resize properties of the web viewer. 

To reduce clutter, a properties object contains all web viewer configurations. The properties object describes various aspects of how the web viewer will behave during and after it is resized.

These documented view properties could be extended by the SDK. At a minimum, the following properties should be supported.

  * "transition" : "default|dissolve|fade|roll|slide|zoom|none",
  * "navigation" : "none|close|back|forward|refresh",
  * "use-background" : "true|false",
  * "background-color" : "#rrggbb",
  * "background-opacity" : "n.n",
  * "is-modal" : "true|false"

*"transition"*

The "transition" property indicates the behavior that will be used as the web viewer is resized. If "transition" is not specified in the properties object, a value of "default" is assumed.

These transitions could be extended by the SDK

|| *transition values* 	|| *description* ||
||default	||use the default transition defined by the SDK||
||dissolve	||the old view seems to dissolve into the new view||
||fade	||the old view seems to fade-out, then then new view fades-in||
||roll	||the new view rolls (up or down) on top of the the old view||
||slide	||the new view slides (left or right) on top of the old view||
||zoom	||the new view grows from single pixel to final size||
||none	||no transition effect||

*"navigation"*

The "navigation" property indicates the navigation options that should be available on the resized web viewer. If "navigation" is not specified in the properties object, a value of "none" is assumed.

|| *navigation values* 	|| *description* ||
||none	||no navigation options are displayed||
||close	||display a button to close the web viewer||
||back	||display a button that executes a browser-back action||
||forward	||display a button that executes a browser-forward action||
||refresh	||display a button that executes a browser-refresh action||

*"useBackground", "backgroundColor", "backgroundOpacity"*

These properties are used to control the behavior of the background of the resized web viewer. They identify whether a background should be displayed behind the resized web viewer which is useful when the web viewer size does not take over the entire device screen, but the end-user should interact only with the ad.

*"isModal"*

The "isModal" property indicates whether the resized web viewer behaves modally - which is to say disables interaction with any part of the application screen outside of itself.