#summary Level 2 Requirements
#sidebar SideBar

=Ad Controller Requirements: Level 2=

===Access to Native Features===
Using standard web technologies in the ad design, and relying on a web viewer in the app to render ads supports many of the presentation needs. For truly rich media advertising, there must also be support for device features that are normally only available to application developers. Devices offer a wide array of functionality beyond simple display of ad content for rich media ads. The Controller provides a layer of abstraction between the ad designer and the device to greater enable cross-device media creation.

Dynamic properties require an event listener strategy. Using just the addEventListener method allows the ad developer to access all native features the SDK supports.

Knowing what features are available to listen for, and what the event names are requires a naming convention. For each feature a Controller supports, the polling method is “poke”+feature name, the getter method is “get”+feature name and the event name is feature name+”Change”. For example, if a Controller supports the device’s native location capabilities, the supported feature is “location”, to get the location the ad developer would call “getLocation”, and to listen for changes, the ad developer poll first with “pokeLocation” then listen for the event named “locationOnchange”.

As devices differentiate, or hardware vendors innovate, additional native features can be added using the same naming convention.

*supports method*
Use this method to determine whether a specific device feature is supported. Although these features, getters, and events are identified as Level 2 compliance, the supports method must be implemented by all SDK vendors.

The controller should support as many of the following features as is possible for a given device.

|| *feature*	|| *description* ||
||screenSize	||SDK will provide info on screen size changes||
||orientation	||SDK will provide orientation info||
||shake	||SDK will provide shake events||
||tilt	||SDK will provide accelerometer data||
||network	||SDK will provide network status||
||location	||SDK will provide geolocation info||
||alignment	||SDK will provide compass info||
||rotation	||SDK will provide gyroscope info||

===Handling Call-to-Action Events===
A rich media ad implements multiple call-to-action events beyond the click to microsite. These events may be executed as anchor links or scripted functions. This means an SDK cannot just listen for clicks in the browser. It must support programmatic clicks as well.

===Hyperlinks===
Rich media designers need access to the minimum calls to action
  * click to visit microsite in-app
  * click to visit microsite with device browser
  * click to play video in-app
  * click to play audio in-app
  * click to send form data
  * click to Google maps
  * click to email
  * click to calendar
  * click to iTunes

===Request Handling===
As mentioned, each call to action may be called as standard anchor tag href attributes or as the result of !JavaScript onclick events. For the SDK, instead of trying to discover every URL, it should support a request handling strategy. The ad developer should use the function wrapper for all click events so they can be processed by the SDK for native applications. A request wrapper allows the ad designer control over how the web viewer handles various click or other request events.

*request method*
Use this method to trigger a request action. The method supports an option to identify the request type, which is especially important for capturing tracking requests offline and executing them whenever the device reconnects

|| *display value*	|| *description* ||
||internal	||display results in app as possible||
||external	||display in native device application||
||ignore	||no display, reporting URL only -- OK to ignore response||
||proxy	||no display, response managed by script -- used for ajax calls||

*“response” event*
This event is thrown when a request action with a display type of "proxy" returns a response. The event contains the URI of the original request action and the full body of the response.