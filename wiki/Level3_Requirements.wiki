#summary Level 3 Requirements
#sidebar SideBar

=Ad Controller Requirements: Level 3=

===Offline Viewing===
While rich media ads are built on web technologies for interoperability, Internet access is not always available in applications. For greatest reach, the SDK should provide a capability for off-line viewing of ads, including a mechanism to send tracking data once Internet access is restored.
Although HTML5 defines a standard for offline assets using a manifest file, this specification does not currently require it. Many ad creatives are built (correctly) as HTML snippets, not complete HTML pages as required for manifests. However, the HTML5 specification for offline viewing is still in progress and this may affect future recommendations for cross-platform rich media ads on mobile devices.

===Asset Management===
To enable offline viewing and performance optimization, the Controller also provides precise control over local cache in the Container. This cache allows the ad designer to define additional aliases for any kind of remote content - images, videos, even other ads - that can then be referenced in the ad when needed.

However, since a finite amount of local cache is available, ad designers may need direct asset management control to optimize the ad experience. The local cache uses a "Least Recently Used" algorithm to retire old assets as new assets are added. If an object is requested from the cache that has been retired, the SDK will attempt to reacquire the asset if online (otherwise a error is thrown -- see error handling).

_Note: Because of security restrictions in the OS Web browser control, only local base HTML documents can access locally stored objets. Therefor, a network served ad must first download a local copy of the same or a different HTML document to load into the ad as part of an expand call._

*addAsset* method

The addAsset method downloads, stores, and creates a new alias for an object in the local cache.

*addAssets method*

Use this method to create multiple aliases at once. Triggers multiple “assetReady” events.

*assetReady* event

The assetReady event fires once an asset has been successfully downloaded. Once the event fires, use getAssetURL to get the local path to the object.

*getAssetURL* method

The getAssetURL method translates the asset alias into a local file path that a local ad can access.

*removeAsset* method

The removeAsset method removes an asset from the local cache. 

*removeAllAssets* method

Use this method to clear the local cache of all aliases. Triggers multiple “assetRemoved” events.

*assetRemoved* event

The assetRemoved event is thrown when an asset has successfully been removed.

*getCacheRemaining* method

The getCacheRemaining method returns the number of remaining bytes available in the local cache.

*assetRetired* event

This event is thrown when an asset has been retired from the local cache to make room for new assets.

===Offline Requests and Metrics===

*request* method

The request method makes an HTTP request when the device has network connectivity and caches the request for later transmission when the device is off line.

*response* event

The response event is fired when a request method completes and provides the response if desired.