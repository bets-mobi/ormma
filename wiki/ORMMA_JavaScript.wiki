#summary ORMMA JavaScript API that all ad developers can use.
#sidebar SideBar

=Introduction=
The adoption of the ORMMA standard allows all ad developers to use the same !JavaScript methods and know that their ad will behave as expected on a variety of platforms.
This page outlines all the methods and events that ad developers will have access to.

<wiki:toc max_depth="3" />


=Methods=
_`*`methods marked with an asterisk are dependent on the device. Ad developers and SDK implementers must use the supports() method to identify what methods are available._


==addAsset==
{{{addAsset(alias, uri)}}}

This method returns no value and executes asynchronously, but the alias can be used immediately in ad content. If the alias is referenced before the asset has loaded, the object simply does not return to the web viewer until it has loaded.

  parameters:
    * alias – string, name that ad developer will use to refer to asset URI
    * uri – string, actual URI of the asset

  return values: none

  event triggered: assetReady

  level: 3

==addAssets==
{{{addAssets(assets)}}}

This method's parameter - "assets" - is an abstract array (aka standard !JavaScript Object) of alias/uri key-value pairs. The method returns no value and executes asynchronously. Usage rules are the same as adding a single alias.

  parameters: assets – object, description of alias/uri key-value pairs

  return values: none

  event triggered: assetReady

  level: 3

==addEventListener==
{{{addEventListener(event, listener)}}}

Use this method to subscribe a specific handler method to a specific event. In this way, multiple listeners can subscribe to a specific event, and a single listener can handle multiple events. The events are:

|| *value*             || *description* ||
||ready             ||report initialize complete||
||network        ||report network connectivity changes||
||keyboard      ||report soft keyboard changes||
||orientation   ||report orientation changes||
||heading        ||report heading changes||
||location        ||report location changes||
||rotation        ||report rotation changes||
||shake            ||report device being shaken||
||state              ||report state changes||
||tilt                  ||report tilt changes||

  parameters:
    * event – string, name of event to listen for
    * listener – function, function name (or anonymous function) to execute

  return values: none

  side effects: registering listeners for device features may power up sensors in the device that will reduce battery life.

  level: 1

==close==
{{{close()}}}

Use this method to return a resized ad to the default position or an expanded ad to its pre-expanded position within the UI. The SDK is responsible for the correct size of the ad within the app UI.

  parameters: none

  return values: none

  event triggered: stateChange

  level: 1

==expand==
{{{expand(initialDimensions, finalDimensions, URL)}}}

Use this method to open a separate overlay ad container view at the highest z-order of the window's view.

dimensions: JSON {top, left, width, height} - this object contains desired point value dimensions of the resized web viewer

  parameters:
    * initialDimensions: an object describing the initial position of the overlay view before the expand transition occurs
    * finalDimensions: the final position of the overlay view after the expand transition occurs
    * URL: The URL for the document to be displayed in the overlay view. If null, the body of the current ad will be used.

  return values: none

  events triggered: stateChange, sizeChange

  level 1

==getCacheRemaining==
{{{getCacheRemaining() -> Number}}}

Use this method to get the available size of the local cache.

  parameters: none

  return values: integer, number of bytes available

  level: 3

==getExpandProperties==
{{{getExpandProperties() -> JSON}}}

Use this method to get the properties for expanding an ad.

  parameters: none

  return values: { ... } - this object contains all the web viewer properties besides dimension that are supported by the SDK vendor, for more info see properties object

*properties object*
{{{
properties = {
 "transition" : "default|dissolve|fade|roll|slide|zoom|none",
 "navigation" : "none|close|back|forward|refresh",
 "use-background" : "true|false",
 "background-color" : "#rrggbb",
 "background-opacity" : "n.n",
 "is-modal" : "true|false"
}
}}}

*"transition"*

If "transition" is not specified in the properties object, a value of "default" is assumed.

*"navigation"*

If "navigation" is not specified in the properties object, a value of "none" is assumed.

*"useBackground"*

"useBackground" should contain a boolean value (true/false) indicating the presence of a background. If "useBackground" is not specified in the properties object, a value of false is assumed.

*"backgroundColor"*

"backgroundColor" is a standard numeric RGB value (most logically expressed in hexadecimal with two digits each for red, green, and blue).

*"backgroundOpacity"*

"backgroundOpacity" is a number between 0 and 1 inclusively (ranging from 0 equaling fully transparent to 1 equaling fully opaque). If either "backgroundColor" or "backgroundOpacity" is not specified in the properties object, values of 0xffffff and 1.0 respectively are assumed.

*"isModal"*

The "isModal" property is a boolean value (true/false) and if it is not specified in the properties object a value of false is assumed.

  events triggered: none

  level: 1

==getHeading`*`==
{{{getAlignment() -> Number}}}

Use this method to get the most recent compass direction of the current vertical axis of the device. To receive events when the a change occurs, register an event listener for "heading" events. Values are:

|| *value*	|| *description* ||
||-1	||no heading known||
|| 0-359 ||compass direction in degrees||

  parameters: none

  return value: Number, the degrees

  related event: headingChange

  level: 2

==getLocation`*`==
{{{getLocation() -> JSON}}}

Use this method to get the most recent location reading from the device.  To receive events when the a change occurs, register an event listener for "location" events.

  parameters: none

  return value: JSON, {lat, lon, acc} - the latitude, longitude, and accuracy of the reading or null

  related event: locationChange

  level: 2

==getMaxSize==
{{{getMaxSize() -> JSON}}}

Use this method to return the maximum size an ad can grow to using the resize() method. This may be set by the developer, or be the size of the parent view.

  parameters: none

  return value: JSON, {height, width} - the maximum height and width the view can grow to

  related events: none

  level: 1

==getNetwork`*`==
{{{getNetwork() -> String}}}

Use this method to identify the most recent network status of the device. To receive events when a change occurs, register an event listener for "network" events. Possible results include:

|| *value*	|| *description* ||
||offline	||no network connection||
||wifi	||network using a wifi antennae||
||cell	||network using a cellular antennae (such as 3G)||
||unknown||network connection in unknown state||

  parameters: none

  return values: String

  related event: networkChange

  level: 2

==getOrientation`*`==
{{{getOrientation() -> Number}}}

Use this method to get the most recent orientation of the device. To receive events when a change occurs, register an event listener for "orientation" events. Possible results include:

|| *value*	|| *description* ||
||-1||device orientation unknown||
||0	||0 degrees (portrait)||
||90	||90 degrees (tilted clockwise to landscape)||
||180	||180 degrees (portrait upside down)||
||270	||270 degrees (tilted counter-clockwise to landscape)||

  parameters: none

  return values: Number

  related event: orientationChange

  level: 2

==getResizeProperties==
{{{properties() -> JSON}}}

Use this method to get the current resize properties of the web viewer. Since the resize action is asynchronous, this value does not update until the action has completed execution (when the "resizeChange" event fires).

  parameters: none

*properties object*
{{{
properties = {
 "transition" : "default|dissolve|zoom|none",
}
}}}

*"transition"*

If "transition" is not specified in the properties object, a value of "default" is assumed.

  level: 1

==getScreenSize`*`==
{{{getScreenSize() -> JSON}}}

Use this method to get the current point width and height of the device.
Point width (pt) is preferred over pixel width (px) because of device screens with different DPI specs.

  parameters: none

  return values: {width, height}

  related event: screenSizeChange

  level: 2

==getShakeProperties`*`==
{{{getShakeProperties() -> JSON}}}

Use this method to retrieve the current shake properties.

  parameters: none

  return values: {interval, intensity}

  related events: shake

  level: 2

==getState==
{{{getState()}}}

This method returns whether the ad is in its default, fixed position or is in an expanded, larger position.

  parameters: none

  Return values: string: "default", "expanded", or "hidden"

  level: 1

==hide==
{{{hide()}}}

Use this method to hide the web viewer. The method has no return value and is executed asynchronously (so always listen for a result event before taking action instead of assuming the change has occurred).

  parameters: none

  return values: none

  side effects: changes state

  level: 1
 
==removeAllAssets==
{{{removeAllAssets()}}}

The method returns no value and executes asynchronously.

  parameters: none

  return values: none

  events triggered: assetRemoved

  level: 3

==removeAsset==
{{{removeAsset(alias)}}}

The method returns no value and executes asynchronously.

  parameters: none

  return values: none

  events triggered: assetRemoved

  level: 3

==removeEventListener==
{{{removeEventListener(event, [listener])}}}

Use this method to unsubscribe a specific handler method from a specific event. Event listeners should always be removed when they are no longer useful to avoid errors. If no listener function is provided, then all functions listening to the event will be removed.

  parameters: 
    * event – String, name of event
    * listener – String, name of function to be removed 

  return values: none

  events triggered: none

  level: 1

==request==
{{{request(uri, display) -> false}}}

The method executes asynchronously, but returns a Boolean value of false to facilitate use in anchor tags. There is also an option explicitly for metrics tracking that will cache requests offline and execute them whenever the device reconnects. The display parameter supports the following values:
 
  parameters: 
    * URL - string, the fully qualified URL of the page or call to action asset
    * display - string, the display style for the call to action

  event triggered: response

  return values: false

  level: 1

==resize==
{{{
resize(height, width)
}}}

Use this method to resize the main ad view to the desired size. The views place in the view hierarch will not change, so the effect on other views is up to the app developer.

  parameters:
    * height: Number: the height in pixels
    * width: Number: the width in pixels

  return values: none

  events triggered: resizeChange, stateChange

  side effects: changes state

  level: 1

==setExpandProperties==
{{{setExpandProperties(properties)}}}

Use this method to set the ad's expand properties.

  parameters: JSON {}

  return values: none

  events triggered: none

  level: 1

==setResizeProperties==
{{{setResizeProperties(properties)}}}

Use this method to set the ads resize properties.

  parameters:
    * properties: JSON { ... } - this object contains any number of properties, such as transition, that might be used by the SDK when resizing the web viewer, for more info see properties object

  return values: none

  events triggered: none

  side effects: none

  level: 1

==setShakeProperties`*`==
{{{setShakeProperties(properties)}}}

Use this method to set the shake properties of the ORMMA object.

  parameters:
    * properties: JSON { intensity, interval } 

  return values: none

  events triggered: none

  side effects: none

  level: 1

==show==
{{{show()}}}

This method has no return value and is executed asynchronously (so always listen for a result event before taking action instead of assuming the change has occurred).
 
  parameters: none

  return values: none

  side effects: changes the state value

  event triggered: visibleChange

  level: 1

==supports==
{{{supports(feature) -> Boolean}}}

For SDKs that do not expose any of the native device features, this method should always return false. The features are:

|| *value*             || *description* ||
||network        ||the device can report on its network connectivity and connectivity changes||
||orientation   ||the device can report on its orientation and orientation changes||
||size               ||the device can report on the screen size||
||heading        ||the device can report on the compass direction it is pointing||
||location        ||the device can report on its location||
||rotation        ||the device can report on its rotation and rotation changes||
||shake            ||the device can report on being shaken||
||tilt                  ||the device can report on its tilt and tilt changes||
||phone           ||the device can make a phone call||
||email            ||the device can compose an email||
||calendar       ||the device can create a calendar entry||
||level-1         ||the SDK supports ORMMA level 1 functionality*||
||level-2         ||the SDK supports ORMMA level 2 functionality*||
||level-3         ||the SDK supports ORMMA level 3 functionality*||

'* One and only one 'level' value will be returned
 
  parameters: String, name of feature

  return values: Boolean – true, the feature is supported and getter and events are available; false, the feature is not supported 

  level: 1


=Events=
_`*`events marked with an asterisk are dependent on the device. Ad developers and SDK implementers must use the supports() method to identify what events are available._

==assetReady==
{{{"assetReady" -> (alias)}}}

This event is thrown when an asset has successfully been loaded in the local cache. 

  parameters: String, alias name of asset that was loaded

  triggered by: addAsset, addAssets

  level: 3

==assetRemoved==
{{{"assetRemoved" -> (alias)}}}

This event is thrown when an asset has successfully been removed from the local cache.

  parameters: String, alias name of asset that was removed

  triggered by: removeAsset, removeAllAssets

  level: 3

==assetRetired==
{{{"assetRetired" -> (alias)}}}

This event is thrown when an asset has been retired from the local cache to make room for new assets. 

  parameters: String, alias name of asset that was removed

  triggered by: addAsset, addAssets, or any application events that determine the cache is full and must be resized

  level: 3

==error==
{{{"error" -> (message, action)}}}

This event is thrown whenever an error occurs. The event contains a description of the error that occurred and, if appropriate, the name of the action that resulted in the error (in the absence of an associated action, the action parameter is null).

  parameters: 
    * message: String, description of the type of error
    * action: String, name of AdController action that caused error

  triggered by: various

  level: 1

==headingChange`*`==
{{{"headingChange" -> heading

This event is thrown when the devices compass direction changes.

  parameters:
    * heading: Number, compass heading in degrees or -1

  triggered by: addEventListener("heading", _function()_)

  level: 2

==keyboardChange`*`==
{{{"keyboardChange" -> (open)}}}

This event is thrown when the software keyboard is opened or closed for text entry in an ad.

  parameters: boolean, open - whether the keyboard is open

  triggered by: addEventListener("keyboard", _function()_)

  level: 1

==locationChange`*`==
{{{“locationChange” -> (lat, lng, acc)}}}

This event is thrown when the device has successfully geolocated itself.

  parameters: 
    * lat: Number, latitude value of device
    * lng: Number, longitude value of device
    * acc: Number, accuracy of the reading

  triggered by: addEventListener("location", _function()_)

  level: 2

==networkChange`*`==
{{{“networkChange” -> (online, connection)}}}

This event is thrown when the device network connection changes, such as loosing or acquiring an Internet connection. The connection type values will vary depending on the device and carrier.

  parameters: 
    * online: Boolean, true – device is connected to the Internet, false – device cannot access the Internet
    * connection: String, description of connection type such as none, wifi, or cell

  triggered by: addEventListener("network", _function()_) or the device itself

  level: 2


==orientationChange`*`==
{{{“orientationChange” -> (orientation)}}}

This event is thrown when the application screen orientation changes.

  parameters: orientation - Integer, degrees from upright portrait view

  triggered by: addEventListener("orientation", _function()_)

  level: 2

==sizeChange==
{{{“sizeChange” -> (dimensions, properties)}}}

This event is thrown when the display state of the web viewer changes.

  parameters: 
    * dimensions: JSON, {top, left, bottom, right} - this object contains point value dimensions of the resized web viewer
    * properties: JSON, { ... } - this object contains the state of all the web viewer properties besides dimension that are supported by the SDK

  triggered by: resize, close, or the device itself

  level: 1

==ready==
{{{"ready"}}}

This event indicates that the ORMMA object has established communication with the SDK and has successfully initialized.

  parameters: none

  triggered by: internal

  level: 1

==response==
{{{“response” -> (uri, response)}}}

This event is thrown when a request action with a display type of "proxy" returns a response. 

  parameters: 
    * uri: String, the URI of the original request action
    * response: String, the full body of the response

  triggered by: request

  level: 1

==rotationChange`*`==
TBD


==screenSizeChange`*`==
{{{“screenSizeChange” -> (height, width) }}}

This event is thrown when the point size of the screen changes, including orientation changes.
Inconsistent – listener gets independent attributes, but calling getScreenSize returns a JSON object

  parameters:
    * height: Integer, point height of the AdView screen area
    * width: Integer, point height of the AdView screen area

  triggered by: resize, close, or the device itself

  level: 1

==shake`*`==
{{{“shake” -> ()}}}

This event is thrown when the device accelerometer detects that the device has been "shaken" as defined by the getShake parameters. Because the ad developer may register one listener for a soft shake and another listener for a harder shake, this event provides threshold and time parameters

  parameters: none

  triggered by: addEventListener("shake", _function()_)

  level: 2

==stateChange==
{{{"stateChange" -> (state)}}}

This event is thrown when the Ad View changes between default and expanded states as the result of a resize() or a close(). The SDK may also close an ad as the result of a user or system action, such as resuming from background.

  parameters: state - String, either "default", "expanded", or "hidden"

  triggered by: resize, close, hide, show, or the app

  level: 1

==tiltChange`*`==
{{{“tiltChange” -> (x, y, z)}}}

This event is thrown when the device has successfully determined its spacial orientation.

  parameters: x,y,z – Numbers, the x, y, and z axis values in radians 

  triggered by: addEventListener("tilt", _function()_)

  level: 2