#summary AdController JavaScript API that all ad developers can use.
#sidebar SideBar

=Introduction=
The adoption of the ORMMA standard allows all ad developers to use the same !JavaScript methods and know that their ad will behave as expected on a variety of platforms.
This page outlines all the methods and events that ad developers will have access to.

<wiki:toc max_depth="3" />


=Methods=
_`*`methods marked with an asterisk are dependent on the device. Ad developers and SDK implementers must use the supports() method to identify what methods are available._


==addAsset==
{{{addAsset(alias, uri)}}}

This method returns no value and executes asynchronously, but the alias can be used immediately in ad content. If the alias is referenced before the asset has loaded, the object simply does not return to the web viewer until it has loaded.

  parameters:
    * alias – string, name that ad developer will use to refer to asset URI
    * uri – string, actual URI of the asset

  return values: none

  event triggered: assetReady

  level: 3

==addAssets==
{{{addAssets(assets)}}}

This method's parameter - "assets" - is an abstract array (aka standard !JavaScript Object) of alias/uri key-value pairs. The method returns no value and executes asynchronously. Usage rules are the same as adding a single alias.

  parameters: assets – object, description of alias/uri key-value pairs

  return values: none

  event triggered: assetReady

  level: 3

==addEventListener==
{{{addEventListener(event, listener)}}}

Use this method to subscribe a specific handler method to a specific event. In this way, multiple listeners can subscribe to a specific event, and a single listener can handle multiple events. 

  parameters:
    * event – string, name of event to listen for
    * listener – function, function name (or anonymous function) to execute

  return values: none

  level: 1

==cacheRemaining==
{{{cacheRemaining() -> Number}}}

Use this method to get the available size of the local cache.

  parameters: none

  return values: integer, number of bytes available

  level: 3

==calendar`*`==
{{{calendar(date, title, detail)}}}

Use this method to create a calendar entry in the phone's default calendar.

  parameters:
    * date - date: the date and time of the event
    * title - string: text to appear in the title of the event
    * detail - string: text to appear in the detail of the event
 
  return values: none

  level: 1

==close==
{{{close()}}}

Use this method to return an expanded ad to its default position within the UI. The SDK is responsible for the correct size of the ad within the app UI.

  parameters: none

  return values: none

  event triggered: stateChange

  level: 1

==email`*`==
{{{email(address, subject, body)}}}

Use this method to create an email message to one or more email addresses and set the subject and body fields to the desired text.

  parameters:
    * address - string: one or more email addresses
    * subject - string: text to appear in the subject line of the email
    * body - string: text to appear in the body of the email
 
  return values: none

  level: 1

==getNetwork`*`==
{{{getNetwork() -> String}}}

Use this method to identify the current network status of the device. Possible results include:

|| *value*	|| *description* ||
||offline	||no network connection||
||wifi	||network using a wifi antennae||
||cell	||network using a cellular antennae (such as 3G)||
||unknown||network connection in unknown state||

  parameters: none

  return values: String

  related event: networkChange

  level: 2

==getOrientation`*`==
{{{getOrientation() -> Number}}}

Use this method to get the current orientation of the device. Possible results include:

|| *value*	|| *description* ||
||-1||device orientation unknown||
||0	||0 degrees (portrait)||
||90	||90 degrees (tilted clockwise to landscape)||
||180	||180 degrees (portrait upside down)||
||270	||270 degrees (tilted counter-clockwise to landscape)||

parameters: none
return values: Number
related event: orientationChange
level: 2

==getResizeDimensions==
{{{dimensions() -> JSON}}}

Use this method to get the current dimensions of the web viewer. Since the resize action is asynchronous, this value does not update until the action has completed execution (when the "resizeChange" event fires).

  parameters: none

  return values: {top, left, bottom, right} - this JSON object contains point value dimensions of the current web viewer

  level: 1

==getResizeProperties==
{{{properties() -> JSON}}}

Use this method to get the current resize properties of the web viewer. Since the resize action is asynchronous, this value does not update until the action has completed execution (when the "resizeChange" event fires).

  parameters: none

  return values: { ... } - this object contains all the web viewer properties besides dimension that are supported by the SDK vendor, for more info see properties object

*properties object*
{{{
properties = {
 "transition" : "default|dissolve|fade|roll|slide|zoom|none",
 "navigation" : "none|close|back|forward|refresh",
 "use-background" : "true|false",
 "background-color" : "#rrggbb",
 "background-opacity" : "n.n",
 "is-modal" : "true|false"
}
}}}

*"transition"*

If "transition" is not specified in the properties object, a value of "default" is assumed.

*"navigation"*

If "navigation" is not specified in the properties object, a value of "none" is assumed.

*"useBackground"*

"useBackground" should contain a boolean value (true/false) indicating the presence of a background. If "useBackground" is not specified in the properties object, a value of false is assumed.

*"backgroundColor"*

"backgroundColor" is a standard numeric RGB value (most logically expressed in hexadecimal with two digits each for red, green, and blue).

*"backgroundOpacity"*

"backgroundOpacity" is a number between 0 and 1 inclusively (ranging from 0 equaling fully transparent to 1 equaling fully opaque). If either "backgroundColor" or "backgroundOpacity" is not specified in the properties object, values of 0xffffff and 1.0 respectively are assumed.

*"isModal"*

The "isModal" property is a boolean value (true/false) and if it is not specified in the properties object a value of false is assumed.

==getScreenSize`*`==
{{{getScreenSize() -> JSON}}}

Use this method to get the current point width and height of the device.
Point width (pt) is preferred over pixel width (px) because of device screens with different DPI specs.

  parameters: none

  return values: {width, height}

  related event: screenSizeChange

  level: 2

==hide==
{{{hide()}}}

Use this method to hide the web viewer. The method has no return value and is executed asynchronously (so always listen for a result event before taking action instead of assuming the change has occurred).

  parameters: none

  return values: none

  level: 1
 
==isVisible==
{{{isVisible() -> Boolean}}}

Use this method to get the current state of the web viewer. This method reflects the current actual state of the web viewer and may not reflect a requested change that has not yet occurred.
 
  parameters: none

  return values: boolean: true = ad is visible, false = ad is not visible

  level: 1

==phone`*`==
{{{phone(number)}}}

Use this method to make a phone call to the provided number.

  parameters: string - the phone number to call 
 
  return values: none

  level: 1

==pokeAlignment`*`==
{{{pokeAlignment()}}}

This method returns no value, executes asynchronously, and triggers the error event "Compass alignment not supported" if compass alignment is not supported on this device. The SDK vendor may combine compass and gyroscope data to return the most accurate response.

  parameters: none

  return values: none

  event triggered: alignmentChange

  level: 2

==pokeLocation`*`==
{{{pokeLocation()}}}

This method returns no value, executes asynchronously, and triggers the error event "location not supported" if geolocation is not supported on this device or denied by the end-user.

  parameters: none

  return values: none

  event triggered: locationChange

  level: 2

==pokeRotation`*`==
TBD

==pokeShake`*`==
{{{pokeShake(threshold, time)}}}

A shake is defined as a period of acceleration that ends in the same orientation as it began. However, one developer’s shake is another developer’s jostle. Use this method to identify what a “shake” is for the current ad. This method returns no value, executes asynchronously, and triggers the error event “Accelerometer not supported” if not supported on this device.

Note: “shake” is a helper feature for the ad developer who could also use getTilt and getOrientation for a similar effect.

  parameters: 
    * threshold – number, average acceleration value to identify a shake
    * time – integer, milliseconds for sustain the average acceleration

  return values: none

  event triggered: shakeChange

  level: 2

==pokeTilt`*`==
{{{pokeTilt()}}}

Use this method to attempt to access the accelerometer. This method returns no value, executes asynchronously, and triggers the error event "Accelerometer not supported" if not supported on this device.

  parameters: none

  return values: none

  event triggered: tiltChange

  level: 2

==removeAllAssets==
{{{removeAllAssets()}}}

The method returns no value and executes asynchronously.

  parameters: none

  return values: none

  events triggered: assetRemoved

  level: 3

==removeAsset==
{{{removeAsset(alias)}}}

The method returns no value and executes asynchronously.

  parameters: none

  return values: none

  events triggered: assetRemoved

  level: 3

==removeEventListener==
{{{removeEventListener(event, [listener])}}}

Use this method to unsubscribe a specific handler method from a specific event. Event listeners should always be removed when they are no longer useful to avoid errors. If no listener function is provided, then all functions listening to the event will be removed.

  parameters: 
    * event – String, name of event
    * listener – String, name of function to be removed 

  return values: none

  events triggered: none

  level: 1

==request==
{{{request(uri, display) -> false}}}

The method executes asynchronously, but returns a Boolean value of false to facilitate use in anchor tags. There is also an option explicitly for metrics tracking that will cache requests offline and execute them whenever the device reconnects. The display parameter supports the following values:
 
  parameters: 
    * URL - string, the fully qualified URL of the page or call to action asset
    * display - string, the display style for the call to action

  event triggered: response

  return values: false

  level: 1

==resize==
{{{resize(dimensions, properties)}}}

In the resize function, the properties value is optional - if no value is given then default values will be assumed for all resize properties. The ad developer must listen for the “resizeChange” event and not assume success.

  parameters:
    * dimensions: JSON {top, left, bottom, right} - this object contains desired point value dimensions of the resized web viewer
    * properties: JSON { ... } - this object contains any number of properties, such as transition, that might be used by the SDK when resizing the web viewer, for more info see properties object

  return values: none

  events triggered: resizeChange, stateChange

  level: 1

==show==
{{{show()}}}

This method has no return value and is executed asynchronously (so always listen for a result event before taking action instead of assuming the change has occurred).
 
  parameters: none

  return values: none

  event triggered: visibleChange

  level: 1

==state==
{{{state()}}}

This method returns whether the ad is in its default, fixed position or is in an expanded, larger position.

  parameters: none

  Return values: string: "default" or "expanded"

  level: 1

==supports==
{{{supports(feature) -> Boolean}}}

For SDKs that do not expose any of the native device features, this method should always return false. The features are:

||value             ||description ||
||network        ||the device can report on its network connectivity and connectivity changes||
||orientation   ||the device can report on its orientation and orientation changes||
||size               ||the device can report on the screen size||
||alignment     ||the device can report on the direction it is pointing||
||location        ||the device can report on its location||
||rotation        ||the device can report on its rotation and rotation changes||
||shake            ||the device can report on being shaken||
||tilt                  ||the device can report on its tilt and tilt changes||
||phone           ||the device can make a phone call||
||email            ||the device can compose an email||
||calendar       ||the device can create a calendar entry||

  parameters: String, name of feature

  return values: Boolean – true, the feature is supported and getter and events are available; false, the feature is not supported 

  level: 1


=Events=
_`*`events marked with an asterisk are dependent on the device. Ad developers and SDK implementers must use the supports() method to identify what events are available._

==alignmentChange`*`==
{{{“alignmentChange” -> (degrees)}}}

This event is thrown when the device has successfully determined its compass alignment.

  parameters: Number, radians clockwise from magnetic North

  triggered by: pokeAlignment

  level: 2

==assetReady==
{{{"assetReady" -> (alias)}}}

This event is thrown when an asset has successfully been loaded in the local cache. 

  parameters: String, alias name of asset that was loaded

  triggered by: addAsset, addAssets

  level: 3

==assetRemoved==
{{{"assetRemoved" -> (alias)}}}

This event is thrown when an asset has successfully been removed from the local cache.

  parameters: String, alias name of asset that was removed

  triggered by: removeAsset, removeAllAssets

  level: 3

==assetRetired==
{{{"assetRetired" -> (alias)}}}

This event is thrown when an asset has been retired from the local cache to make room for new assets. 

  parameters: String, alias name of asset that was removed

  triggered by: addAsset, addAssets, or any application events that determine the cache is full and must be resized

  level: 3

==error==
{{{"error" -> (message, action)}}}

This event is thrown whenever an error occurs. The event contains a description of the error that occurred and, if appropriate, the name of the action that resulted in the error (in the absence of an associated action, the action parameter is null).

  parameters: 
    * message: String, description of the type of error
    * action: String, name of AdController action that caused error

  triggered by: various

  level: 1

==locationChange`*`==
{{{“locationChange” -> (lat, lng)}}}

This event is thrown when the device has successfully geolocated itself.

  parameters: 
    * lat: Number, latitude value of device
    * lng: Number, longitude value of device

  triggered by: pokeLocation

  level: 2

==networkChange`*`==
{{{“networkChange” -> (online, connection)}}}

This event is thrown when the device network connection changes, such as loosing or acquiring an Internet connection. The connection type values will vary depending on the device and carrier.

  parameters: 
    * online: Boolean, true – device is connected to the Internet, false – device cannot access the Internet
    * connection: String, description of connection type such as none, wifi, or cell

  triggered by: getNetwork, device itself

  level: 2


==orientationChange`*`==
{{{“orientationChange” -> (orientation)}}}

This event is thrown when the application screen orientation changes.

  parameters: orientation - Integer, degrees from upright portrait view

  triggered by: getOrientation, device itself

  level: 2

==resizeChange==
{{{“resizeChange” -> (dimensions, properties)}}}

This event is thrown when the display state of the web viewer changes.

  parameters: 
    * dimensions: JSON, {top, left, bottom, right} - this object contains point value dimensions of the resized web viewer
    * properties: JSON, { ... } - this object contains the state of all the web viewer properties besides dimension that are supported by the SDK

  triggered by: resize, device itself

  level: 1


==response==
{{{“response” -> (uri, response)}}}

This event is thrown when a request action with a display type of "proxy" returns a response. 

  parameters: 
    * uri: String, the URI of the original request action
    * response: String, the full body of the response

  triggered by: request

  level: 1


==rotationChange`*`==
TBD


==screenSizeChange`*`==
{{{“screenSizeChange” -> (height, width) }}}

This event is thrown when the point size of the screen changes, including orientation changes.
Inconsistent – listener gets independent attributes, but calling getScreenSize returns a JSON object

  parameters:
    * height: Integer, point height of the AdView screen area
    * width: Integer, point height of the AdView screen area

  triggered by: resize, device itself

  level: 1

==shakeChange`*`==
{{{“shakeChange” -> (threshold, time)}}}

This event is thrown when the device accelerometer detects that the device has been "shaken" as defined by the getShake parameters. Because the ad developer may register one listener for a soft shake and another listener for a harder shake, this event provides threshold and time parameters

  parameters: 
    * threshold: Number, threshold value identified by pokeShake
    * time: Integer, time value identified by pokeShake

  triggered by: device itself after configuration by pokeShake

  level: 2

==stateChange==
{{{"stateChange" -> (state)}}}

This event is thrown when the Ad View changes between default and expanded states as the result of a resize() or a close(). The SDK may also close an ad as the result of a user or system action, such as resuming from background.

  parameters: state - String, either "default" or "expanded"

  triggered by: resize, close, app

  level: 1

==tiltChange`*`==
{{{“tiltChange” -> (x, y, z)}}}

This event is thrown when the device has successfully determined its spacial orientation.

  parameters: x,y,z – Numbers, the x, y, and z axis values in radians 

  triggered by: pokeTilt

  level: 2

==visibleChange==
{{{visibleChange -> (state)}}}

This event is thrown when the Ad View changes between a visible and hidden state from the point of view of the end-user.

  parameters: state – String, either “hidden” or “visible”

  triggered by: show, hide, device itself

  level: 1